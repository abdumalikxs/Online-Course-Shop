Let's send POST requests the same way we did DELETE ones 
the path to sending POST requests will be : http://localhost:8000//api/v1/courses/

- change the request methdo to POST
- put URL to : http://localhost:8000//api/v1/courses/
- in Headers leave the things same same as we wrote for DELETE requests
- now, go to bosy section, and here we should click 'raw' option
- and from there select JSON.
- now, in the body of our request we are gonna send a JSON file, which will have neccessary fields
for the creation of a new course,
as we know each course should have: title, studnets_qty, reviews_qty, price, category. 
ID, and created at will be created autmatically by Django 

--- Important note that when we get response for our GET requests for courses we 
never get the category where that specific course is in:
        {
            "created_at": "2025-09-03T19:41:33.543442",
            "id": 1,
            "price": 99.99,
            "resource_uri": "/api/v1/courses/1/",
            "reviews_qty": 50,
            "students_qty": 100,
            "title": "Complete Python Guide"
        },

It happens Because Tastypie won’t include ForeignKey fields unless you declare them in the Resource.

- But in DB browser the Categories of Courses are saved in thsi field: category_id.
- and that field has values: 1 and 2's.

- let's when doing a POST request mention category_id in the JSON in thet body.

- so that our JSON body will look like this :
{
    "title": "Complete C# Guide",
    "price": 49.99,
    "students_qty": 200,
    "reviews_qty": 120,
    "category_id": 1
}

- Okay, so now we have our POST, our URL , our BODY JSON,and our Header with API key.

- lets check it our what will happen if we disselect our API key and send request.
- dont forget the ending '/'.
- now we got STATUS: 401 Unauthorized error.
- now, turn on authorization (select).
- send request.
- we got Status: 500 Internal server error
- and below we see detailed error_message : "NOT NULL constraint failed: shop_course.category_id"
- meaning there is a problem with category_id.

!!! --> It means that we are not allowed to do this:    "category_id": 1
- This is not allowed because we have clear specific link between two tables: courses and categories.
- This is the code line from Course class:
category = models.ForeignKey(Category, on_delete=models.CASCADE)

- In this case the link between Courses and Categories is controlled on a Model Level.
- And it means we can't simpply create a course in specific category doing something like this:
 "category_id": 1

- So for this to become possible we have to add settings in models.py file for api App.
- Specificlaly for CourseResource:
  - we should add two methods:
• hydrate - runs on POST and PUT (when you’re sending data into the API). 
It prepares the Django model instance before saving.
• dehydrate - runs on GET (when you’re getting data out of the API). 
It prepares the JSON response that the client will see.

	•	Hydrate = JSON input → model
	•	Dehydrate = model → JSON output

So our hydrate and dehydrate methods should look like this:

    def hydrate(self, bundle):
        bundle.obj.category_id = bundle.data['category_id']
        return bundle

    def dehydrate(self, bundle):
        bundle.data['category_id'] = bundle.obj.category
        return bundle

So in here in two different places we used bundle.obj.category and bundle.obj.category_id

the difference between these two is :
	•	category_id → the raw integer foreign key value stored in the database (e.g., 1).
	•	category → the actual related Category object you can access (e.g., Category(title="Python")).

So course.category_id gives you the number, while course.category gives you the object.

category_id is the integer stored in the Course table that comes from the id field 
of the related Category, while category gives you the full Category object.

##########
When Tastypie (or Django) starts creating a new object from your POST request, it does something like:
    1.  bundle.obj = Course()   # empty Course instance
	2.	Tastypie parses that JSON and puts it into bundle.data.
    3.  bundle.obj.category_id = bundle.data['category_id']

Le'ts go back to our Course model definition:

class Course(models.Model):  # Model for a Course
    title = models.CharField(max_length=300)
    price = models.FloatField()
    students_qty = models.IntegerField()
    reviews_qty = models.IntegerField()
    # Foreign key means key from a different table
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
# on_delete=models.CASCADE  --> means that when deleting specific category,
# automatically the Course instances of it will be deleted as well.
    # date will be generated automatically
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return self.title

    --- here we have method category ,
     but not category_id.

     So category_id is not a Course class attribute, but rather it is an instance atttribute

----> So when Django builds the Course class, it knows every instance of Course will have both 
.category (relationship) and .category_id (integer FK).


Now, let's save our models.py and see what happens when we send POST and GET requests:

send: GET | http://localhost:8000/api/v1/courses/ :

we got: 4 courses

And note that now , in each object we have a field category_id, which we didnt have previously.
"category_id": "Programming"


If we  comment :

    # def dehydrate(self, bundle):
    #     bundle.data['category_id'] = bundle.obj.category # returns __str__'s result
    #     return bundle

--> We will not see category_id in Server response for our get request


Now send POST | http://localhost:8000/api/v1/courses/ 

Got Status: 201 Created

Now let's do again GET |  http://localhost:8000/api/v1/courses/ 
and now we got 5 courses.
and the ID for the course we created is 6.

Note that we had test course with ID=5 , but we deleted it.


Overall, this process allowed us to create a new course entry in the `courses` resource 
via the POST method, sending JSON data from the client and having it saved into
the database through our API.

Let's add one more course:
Status 201 Created.