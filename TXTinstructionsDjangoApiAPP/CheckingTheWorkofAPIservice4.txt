save urls.py and let's check the access to our api App using the routes like:
api/courses/
api/categories/

For instance doing 'http://localhost:8000/api/courses/' :
I got this response from server:

{"meta": {"limit": 20, "next": null, "offset": 0, "previous": null, "total_count": 4}, 
"objects": [
{"created_at": "2025-09-03T19:41:33.543442", "id": 1, "price": 99.99, "resource_uri": "/api/courses/1/", "reviews_qty": 50, "students_qty": 100, "title": "Complete Python Guide"}, 
{"created_at": "2025-09-03T20:23:09", "id": 2, "price": 89.99, "resource_uri": "/api/courses/2/", "reviews_qty": 20, "students_qty": 80, "title": "Complete Java Guide"}, 
{"created_at": "2025-09-03T23:34:45", "id": 3, "price": 59.99, "resource_uri": "/api/courses/3/", "reviews_qty": 100, "students_qty": 200, "title": "Complete JavaScript Guide"}, 
{"created_at": "2025-09-04T23:14:36", "id": 4, "price": 99.99, "resource_uri": "/api/courses/4/", "reviews_qty": 30, "students_qty": 50, "title": "Complete Marketing Guide"}
]}

This response is in JSON format but it is also not formatted for a convenient reading,
that's why let's install extension to our browser

Now after extensions was applied we see this:

{
  "meta": {
    "limit": 20,
    "next": null,
    "offset": 0,
    "previous": null,
    "total_count": 4
  },
  "objects": [
    {
      "created_at": "2025-09-03T19:41:33.543442",
      "id": 1,
      "price": 99.99,
      "resource_uri": "/api/courses/1/",
      "reviews_qty": 50,
      "students_qty": 100,
      "title": "Complete Python Guide"
    },
    {
      "created_at": "2025-09-03T20:23:09",
      "id": 2,
      "price": 89.99,
      "resource_uri": "/api/courses/2/",
      "reviews_qty": 20,
      "students_qty": 80,
      "title": "Complete Java Guide"
    },
    {
      "created_at": "2025-09-03T23:34:45",
      "id": 3,
      "price": 59.99,
      "resource_uri": "/api/courses/3/",
      "reviews_qty": 100,
      "students_qty": 200,
      "title": "Complete JavaScript Guide"
    },
    {
      "created_at": "2025-09-04T23:14:36",
      "id": 4,
      "price": 99.99,
      "resource_uri": "/api/courses/4/",
      "reviews_qty": 30,
      "students_qty": 50,
      "title": "Complete Marketing Guide"
    }
  ]
}


As we see server returned us a list of objects,
each of object being a specific course.

- we got a total of 4 objects.


Let's try to access a list of categories:
'localhost:8000/api/categories'

and we got JSON:

{
  "meta": {
    "limit": 20,
    "next": null,
    "offset": 0,
    "previous": null,
    "total_count": 2
  },
  "objects": [
    {
      "created_at": "2025-09-03T17:46:38.472612",
      "id": 1,
      "resource_uri": "/api/categories/1/",
      "title": "Programming"
    },
    {
      "created_at": "2025-09-04T23:13:55",
      "id": 2,
      "resource_uri": "/api/categories/2/",
      "title": "Marketing"
    }
  ]
}

with two objects.


We can see that each of these objects has 'resource_uri' 
--- it is a path to a specific record


Also we can request a specific course like this:
http://localhost:8000/api/courses/1/

So this is the way RestAPI works, which we created right now

Overall:
•	REST is an architectural style that organizes data as resources (like courses, categories, users), each accessible via a unique URL (called an endpoint).
•	API is the interface that exposes those resources so other software can interact with them.



In REST API:
	•	URLs (endpoints) identify which resource you’re working with.
	•	HTTP methods (GET, POST, PUT, DELETE, etc.) tell what action you want to perform on that resource.
	•	Request body & headers (in POST/PUT especially) carry data you’re sending to the server (like course title, price, etc.).
	•	Response usually comes back as JSON with data or status info.

So:
	•	URL = address of the resource
	•	Method = action to perform
	•	Body/headers = extra data or instructions


#####
So now, browser send GET requests and server returns JSON

we can check this by inspecting webpage:
go to Network.
refresh the page.
click the object '1'.

And here we can see that request Type was : GET
Status was:  200 OK (meaning successful)

We can go to Response(on Chrome) and we see JSON text.
Going to preview we can parsed JSON.
So server is sending JSON just in str format.

#######
The JSON response that the server returns also includes and objects called
'meta that comes first.'

which looks as following :

 "meta": {
    "limit": 20,
    "next": null,
    "offset": 0,
    "previous": null,
    "total_count": 4
  }

  ---> It has limit, next, offset, previous, total_count.

•	limit → the maximum number of items returned in one response (here it’s 20).
•	offset → the starting position in the dataset (here 0 means “start from the first record”).
•	total_count → how many items exist in total in the database (here 4 courses, or 2 categories).
•	next → the URL to fetch the next page of results (if there are more than limit items). It’s null because you already got all items.
•	previous → the URL to fetch the previous page of results. Also null here since you started at the beginning.


We can also add a Query String in the URL:
http://localhost:8000/api/courses/?offset=2
---> means start from the third object in objects. 
So that now we got only 2 last objects as a response, 3rd and 4th objects.

we can also add a limit
http://localhost:8000/api/courses/?offset=2&limit=1
Now we are gonna get only 1 object(3) from the two given(3, 4).


-- And if we want to read the next block of our list object,
there is next available there which provides the URL to the next object .


And all of these things are available from the beginning from the box.