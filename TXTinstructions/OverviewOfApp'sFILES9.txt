admin.py :
registers your models so they can be managed through 
Django’s built-in admin interface.

apps.py :
stores the configuration for your Django app (like its name and settings) 
so Django can recognize and manage it.

class ShopConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'shop'

class ShopConfig(AppConfig): → Defines configuration for the shop app.
default_auto_field = 'django.db.models.BigAutoField' 
→ Sets default primary key type to a big auto-increment integer.
name = 'shop' → Tells Django this app’s name is shop.

default_auto_field is only for the database.
It decides what kind of ID column (primary key) Django will create if you don’t define one yourself.
By default, it gives each row an auto-incrementing id.



models.py :  we should create our modules here

Models are used for working with Databases
They define the structure of your data (tables and columns).
They let you create, read, update, delete records using Python instead of SQL.
They connect your app logic (views) with the database.

# And we dont have to write sql_requests to work with databases that's why


tests.py :

tests.py is where you write automated tests for your Django app.
Purpose: to check if your models, views, forms, etc. work correctly.

views.py : 

views.py is where you put the logic for handling requests and returning responses.
A view takes an HTTP request → processes it (maybe using models) 
→ returns an HTTP response (often an HTML page or JSON).

# in views.py we create view functions which:
takes request and returns result (response)
anything like text, json, image etc.