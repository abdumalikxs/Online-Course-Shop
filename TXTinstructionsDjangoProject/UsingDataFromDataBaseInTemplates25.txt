# In render function we can give third argument called context,
and the value for this should be in mapping format meaning:
key:value pairs , so for this we can use a dictionary.

And in thi dict we can pass key 'courses' with a value courses like this:

def index(request):     # request that we get from user
    courses = Course.objects.all()
    # django will search courses.html inside the templates sub-directory that we created
    # we are passing courses sequence to render as 3rd argument
    return render(request, 'courses.html', {'courses': courses})


# Now go to courses.html template:
this document is not just an html document, it is a Django template:
and in Django Templates we can use python code and also access some data and variables from there.

it means that now, in our template djnago we have access to a variable courses.

Now, how to access variables in Django Template:
--> we can do this using two pairs of '{}' brackets like this in courses.html:   {{courses}} 

-> but as we see in courses.html this part of our code doesnt get colored in VScode
---> to see where we have python code in html, we need to install extension for Django,
it is called 'django'.

------> Exactly now after installing it, we can see that python part of our code,
is lighting up with a different coloring.
It means that now , we are working with Django Template.
This way we can refer to variables that we pass to a Django Template.

# Now for each course from our database, we should create a separate row in the table
in web interface:
one row looks like this in html:

        <tr>
            <td>My course</td>
            <td>Programming</td>
            <td>49.99</td>
            <td>200</td>
            <td><button>Buy</button></td>
        </tr>

# We can also implement this in Django Template by iterating over courses sequence.

---> So as we used {{}} in Djnago templates, there is also thing like:
{%  %}

So overall:
• while {{ ... }} is for outputting values (like variables).
• We use {% ... %} for logic (like loops, conditions, including files, etc.), 
!!! note that if we opens a block of code (loop, condition, block), 
it needs an end. If it’s a single instruction, it doesn’t.

To end we write things like: 
{% endfor %} ---> for   for loops
{% endif %}  ---> for   conditions 


so that now our tempalte looks like this:

<table>
    <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Price</th>
            <th>Students Quantity</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        {% for course in courses %}
        <tr>
            <td>My course</td>
            <td>Programming</td>
            <td>49.99</td>
            <td>200</td>
            <td><button>Buy</button></td>
        </tr>
        {% endfor %}
    </tbody>
</table>

Now insde our For Loop, we have access to a variable 'course'.
So that now we can refer to its data fields: with {{course.title}}

# now it looks like this:

  <tbody>
    {% for course in courses %}
    <tr>
      <td>{{ course.title }}</td>
      <td>{{ course.category }}</td>
      <td>{{ course.price }}</td>
      <td>{{ course.students_qty }}</td>
      <td><button>Buy</button></td>
    </tr>
    {% endfor %}
  </tbody>

Let's save it and see, what we get in web Interface:
Yeah we see full table with data from our DataBase.


Now let's try to go to Admin panel in a separate browser tab,
and from there create a new Category "Marketing" and a new course "Complete Marketing Guide"

--- AAAND WOALLYA ----> It appeared in our SHOP page.


But, for now our table is not looking that much of appealing, 
so that let's next add an External Library BootStrap using 
which we can easily and quickly design various html elements.

#####
But before that we will look at the connection between layers in Django Apps.