As we did a lot for our Django app,
Now it's time not to only display text 'Hello from the Shop App',
but rather a list of courses for instance.

As we remember, Views in Django are responsible for the 
thing that is displayed in user interface

views.py of our shop app added a function called  index().
We called it index becasue it processes user's request which comes for the main page 
of our shop App

•	The name index is just a convention (like “home page”), not a strict rule.

As of nwo we are jusut returning :
return HttpResponse('Hello from the Shop App') in views.py index() function.

As now we have courses in our database we can views them for our user,
that means returning the list of titles of courses instead of this line:
Hello from the Shop App.

Let's do it:
to be able to read data from database we should import model Course(class)
 which is located in models.py

Now using this Course model we can access all courses from database,
the same way as we did it in Django Shell

using : courses = Course.objects.all()
now it looks like this:

def index(request):     # request that we get from user
    courses = Course.objects.all()
    return HttpResponse(courses)

got : 'Complete Python GuideComplete Java GuideComplete JavaScript Guide' in webInterface
We got the titles of courses since we added __str__ magic method for our model (Class).

For instance if we comment this in models.py:
    def __str__(self):
        return self.title

we are gonna get this in webInterface:
'Course object (1)Course object (2)Course object (3)'


Overall we have such code for views.py:

from django.shortcuts import render
from django.http import HttpResponse  # importing HttpResponse class
# Create your views here.
# means in current file we want to find module called models.py
from .models import Course
# and import Course from there
# Without the dot, Python (not Django) searches from the project root where
# manage.py runs, so it skips your app folder.


def index(request):     # request that we get from user
    courses = Course.objects.all()
    # every object of courses will be converted to str cuz the __str__ is implemented for Model Course
    # return works cuz HttpResponse sends raw text, and the browser interprets it as HTML/JS.
    return HttpResponse('<br>'.join([str(course) for course in courses]))
    # same thing:
    # return HttpResponse(''.join([str(course) + '<br>' for course in courses]))
# now to list the courses line by line instead of a one row,
# let's use a tag called <br>
# let's do it using ''.join()
# remember that join works only with strings
# we could do list(courses) but it wouldn't trigger str directly we would have to call it again


# Let's click right button of mouse and click view page source.


# In our case we used HTML tags like <br>
but if we want to use a lot of such tags it can be arduous for us.

So For This Purpose We Have Templates.
Next we are gonna create Html Template in next lesson

and let's leave it like this for now :

def index(request):     # request that we get from user
    courses = Course.objects.all()
    # every object of courses will be converted to str cuz the __str__ is implemented for Model
    return HttpResponse(courses)