for our shop now we have 2 routes, one is for main page of shop via index viewFunction 
and the other one is a route that takes us to the specific page of a course.

Now it's time to set up the navigation between these two routes:
meaning we should create linkes inside each of these to take to each of them.

for this let's go to our main page courses.html and for names of courses
put them inside anchored links with <a> tag in html

for this put 'a' and click TAB
and put {{ course.title }} inside <a>

finally make it look like this:

<a href="{{course.id}}">{{ course.title }}</a> 

!!!important!!!
href="1" is a relative URL, so the browser appends it to the current path (e.g., /shop/ → /shop/1).


We can also make it like this:
<a href="/shop/{{course.id}}">{{ course.title }}</a>  --- absolute path

but this last version would result in errors if we would change from base urls.py 
the 'shop' name to something else


So Overall there are 3 methods of implementing Routing:

1. Relative path
<a href="{{course.id}}">Link</a>
	•	Browser appends 1 to the current page’s URL.
	•	Works only if you’re already inside /shop/ or /courses/.
	•	❌ Breaks if template is used on another page (e.g. /about/ → /about/1).

2. Absolute hardcoded path
<a href="/shop/{{course.id}}">Link</a>
	•	Always points to /shop/1.
	•	Doesn’t depend on current page.
	•	❌ Breaks if you rename the prefix in urls.py (e.g. change /shop/ → /courses/).

3. Django dynamic path
<a href="{% url 'single_course' course.id %}">Link</a>
	•	Django looks up the URL pattern by name (single_course).
	•	Builds the correct absolute URL (/shop/1 or /courses/1) automatically.
	•	✅ Most flexible — never breaks if prefixes change in urls.py.


    SO the best versions is the third one.